import komand
import logging
import json
import urllib2
import requests


class CreateInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "email": {
      "type": "string",
      "title": "User's email",
      "description": "The email address",
      "order": 8
    },
    "is_group_admin": {
      "type": "boolean",
      "title": "Group Admin",
      "description": "The user is group admin",
      "default": false,
      "order": 5
    },
    "mention_name": {
      "type": "string",
      "title": "Mention Name",
      "description": "User's @mention name",
      "order": 4
    },
    "name": {
      "type": "string",
      "title": "User's full name",
      "description": "User's full name. Valid length range: 1 - 50",
      "order": 1
    },
    "password": {
      "type": "string",
      "title": "User's password",
      "description": "If not provided, a randomly generated password will be returned",
      "order": 7
    },
    "roles": {
      "type": "array",
      "title": "List roles",
      "description": "The list of roles for the user",
      "items": {
        "type": "string"
      },
      "order": 2
    },
    "timezone": {
      "type": "string",
      "title": "Timezone",
      "description": "User's timezone",
      "default": "UTC",
      "order": 6
    },
    "title": {
      "type": "string",
      "title": "Title of User",
      "description": "Title of user",
      "order": 3
    }
  },
  "required": [
    "email",
    "name"
  ]
}
    """)
    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "entity": {
      "type": "object",
      "title": "Entity",
      "order": 3
    },
    "id": {
      "type": "integer",
      "title": "User ID",
      "description": "The new created user id",
      "order": 1
    },
    "links": {
      "type": "object",
      "title": "Links",
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class Create(komand.Action):

    def __init__(self):
        super(self.__class__, self).__init__(
                name='create',
                description='Creates a new user',
                input=CreateInput(),
                output=CreateOutput())

    def run(self, params={}):
        try:
          server  = self.connection.server
          token   = self.connection.token
          data = {}       
          # add request property
          name  = params.get("name", "")
          email = params.get("email", "")
          roles = params.get("roles", "")
          title = params.get("title", "")
          timezone = params.get("timezone", "")
          password = params.get("password", "")
          mention_name   = params.get("mention_name", "")
          is_group_admin = params.get("is_group_admin", "")

          data["name"] = name
          data["email"] = email
          data["is_group_admin"] = is_group_admin

          if roles:
            data["roles"] = roles
          if title:
            data["title"] = title
          if timezone:
            data["timezone"] = timezone
          if password:
            data["password"] = password
          if mention_name:
            data["mention_name"] = mention_name

          url = server + '/user'

          # new Request Request   
          request = urllib2.Request(url, data=json.dumps(data), headers={'Content-Type': 'application/json', 'Authorization': 'Bearer %s'%token})   
          
          # Call api and response data    
          resp = urllib2.urlopen(request)
          
          # handle decoding json
          try:
            result_dic = json.loads(resp.read())
          except ValueError as e:
            logging.error('Decoding JSON Errors:  %s', e)
            raise('Decoding JSON Errors')

          return result_dic
        # handle exception
        except urllib2.HTTPError, e:
          logging.error('HTTPError: %s for %s', str(e.code), url)
          message = json.loads(e.read())["error"]["message"]
          logging.error('HTTPError Reason: %s'%message)
          raise Exception(message)
        except urllib2.URLError, e:
          logging.error('URLError: %s for %s', str(e.reason), url)
        except Exception:
          import traceback
          logging.error('Generic Exception: %s', traceback.format_exc())
        raise Exception('URL Request Failed')

    def test(self):
        http_method = "GET"
        server  = self.connection.server
        token   = self.connection.token

        #  url test authentication
        url = server + '/room'
        
        # call request test authentication
        response = requests.request(http_method, url,
                                    headers={'Content-Type': 'application/json', 'Authorization': 'Bearer %s'%token})

        if response.status_code == 401:
            raise Exception('Unauthorized: %s (HTTP status: %s)' % (response.text, response.status_code))
        if response.status_code != 200:
            raise Exception('%s (HTTP status: %s)' % (response.text, response.status_code))

        return {'status_code': response.status_code}
